{"version":3,"sources":["components/constants.js","components/card/Card.js","components/column/Column.js","components/board/Board.js","serviceWorker.js","index.js"],"names":["DIRECTIONS","LEFT","RIGHT","Card","_this","this","react_default","a","createElement","className","props","hasLeft","onClick","moveCard","id","contentString","hasRight","Component","Column","addCard","result","window","prompt","addCards","direction","cardIdx","_this2","concat","class","title","cards","map","card","idx","card_Card","key","contents","Board","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","value","colIdx","newCard","targetColumn","state","columns","find","col","newTargetColumn","objectSpread","toConsumableArray","setState","prevState","slice","sliceFrom","targetColIdx","originalTargetCol","originalCol","newOriginalCol","newTargetCol","editedCols","unshift","push","titleClass","column","column_Column","Boolean","location","hostname","match","ReactDOM","render","board_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c733854.chunk.js","sourcesContent":["export const DIRECTIONS = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\n","import React, { Component } from 'react';\nimport { DIRECTIONS } from '../constants';\n\nclass Card extends Component {\n\n  render() {\n    const leftArrow = '<';\n    const rightArrow = '>';\n\n    return (\n      <div className=\"Card\">\n        <div className=\"Card__contents\">\n          {this.props.hasLeft &&\n            <div className=\"Card__arrow\" onClick={() => { this.props.moveCard(DIRECTIONS.LEFT, this.props.id) }}>{leftArrow}</div>\n          }\n          <div className=\"Card__text\">{this.props.contentString}</div>\n          {this.props.hasRight &&\n            <div className=\"Card__arrow\" onClick={() => { this.props.moveCard(DIRECTIONS.RIGHT, this.props.id) }}>{rightArrow}</div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from '../card/Card';\n\nclass Column extends Component {\n\n  /**\n   * Add a card, using the window.prompt API\n   */\n  addCard = () => {\n    const result = window.prompt('Add a card');\n    // Do nothing if input is blank\n    if (result) {\n      this.props.addCards(result, this.props.id);\n    }\n  }\n\n  /**\n   * Move a card to the left or right column from this one\n   * Basically just call the prop method but add on the id of this column\n   */\n  moveCard = (direction, cardIdx) => {\n    this.props.moveCard(direction, this.props.id, cardIdx);\n  }\n\n  render() {\n    // Card direction arrows are based on the current column's index\n    // The 4 columns are fixed. Obviously if columns were customisable\n    // this wouldn't be hard coded\n    const hasLeft = this.props.id > 0;\n    const hasRight = this.props.id < 3;\n\n    return (\n      <div className=\"Column\">\n        <div className={`Column__title Column__title--${this.props.class}`}>\n          <div className=\"Column__title--text\">{this.props.title}</div>\n        </div>\n        {\n          this.props.cards.map((card, idx) => {\n            return (\n              <Card\n                key={idx}\n                id={idx}\n                hasLeft={hasLeft}\n                hasRight={hasRight}\n                contentString={card.contents}\n                moveCard={this.moveCard}\n                >\n              </Card>\n            );\n          })\n        }\n        <div className=\"Column__add\">\n          <button onClick={this.addCard}>+ Add a card</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Column;\n","import React, { Component } from 'react';\nimport Column from '../column/Column';\nimport { DIRECTIONS } from '../constants';\n\nclass Board extends Component {\n  constructor() {\n    super();\n\n    // Starting states\n    // Just some random columns\n    this.state = {\n      columns: [\n        {\n          title: 'Crazy Ideas',\n          titleClass: 'lightpurple',\n          cards: [\n            {\n              contents: 'Learn Finnish'\n            },\n            {\n              contents: 'Enroll in UX Academy'\n            }\n          ]\n        },\n        {\n          title: 'Planning',\n          titleClass: 'lightpink',\n          cards: [\n            {\n              contents: 'Live in Europe'\n            },\n            {\n              contents: 'Take a train trip over winter holidays'\n            }\n          ]\n        },\n        {\n          title: 'Doing',\n          titleClass: 'darkpink',\n          cards: [\n            {\n              contents: 'JavaScript30 challenge'\n            },\n            {\n              contents: 'Suck less at React'\n            }\n          ]\n        },\n        {\n          title: 'Done',\n          titleClass: 'darkpurple',\n          cards: [\n            {\n              contents: 'Updated personal website'\n            },\n            {\n              contents: 'An interview with <redacted>'\n            }\n          ]\n        }\n      ]\n    }\n  }\n\n  /**\n   * Add a card, given a value and a column id\n   */\n  addCards = (value, colIdx) => {\n    // Create the new card object\n    const newCard = {\n      contents: value\n    }\n\n    // Find the column to append the card to - get its data AND index\n    // Ahhh, there should be a cleaner way to do this\n    const targetColumn = this.state.columns.find((col, idx) => {\n      return idx === colIdx;\n    });\n\n    // Make a copy of the column to modify\n    const newTargetColumn = {\n      ...targetColumn,\n      cards: [...targetColumn.cards, newCard]\n    }\n\n    this.setState((prevState) => ({\n      columns: [\n        ...prevState.columns.slice(0, colIdx),\n        newTargetColumn,\n        ...prevState.columns.slice(colIdx + 1)\n      ]\n    }));\n  }\n\n  /**\n   * Move a card to the column to the left or to the right of it\n   */\n  moveCard = (direction, colIdx, cardIdx) => {\n    // Grab the column to move the card to\n    const targetColIdx = (direction === DIRECTIONS.LEFT) ? colIdx - 1 : colIdx + 1;\n    const originalTargetCol = this.state.columns[targetColIdx];\n\n    // Grab the content string of the card to be moved, we do not care about\n    // any other attribute as it is not stored in the state\n    const originalCol = this.state.columns[colIdx];\n    const { contents } = originalCol.cards[cardIdx];\n\n    // Recreate the object of the column that is losing a card\n    const newOriginalCol = {\n      ...originalCol,\n      cards: [\n        ...originalCol.cards.slice(0, cardIdx),\n        ...originalCol.cards.slice(cardIdx + 1)\n      ]\n    };\n\n    // Add the card to the target column\n    const newTargetCol = {\n      ...originalTargetCol,\n      cards: [\n        ...originalTargetCol.cards.slice(0, cardIdx),\n        { contents },\n        ...originalTargetCol.cards.slice(cardIdx)\n      ]\n    };\n\n    // Depending on if the target is left or right of the original col, we can unshift or push it\n    // Also find the index from which to slice when recreating the board during setState\n    let sliceFrom;\n    const editedCols = [newOriginalCol];\n    if (direction === DIRECTIONS.LEFT) {\n      editedCols.unshift(newTargetCol);\n      sliceFrom = targetColIdx;\n    } else {\n      editedCols.push(newTargetCol);\n      sliceFrom = colIdx;\n    }\n\n    // Finally ready to update the state!\n    this.setState((prevState) => ({\n      columns: [\n        ...prevState.columns.slice(0, sliceFrom),\n        ...editedCols,\n        ...prevState.columns.slice(sliceFrom + 2)\n      ]\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"Board\">\n        {\n          this.state.columns.map((column, idx) => {\n            // Use the class as the unique key since they are fixed....\n            // okay, I know that's an awkward option, think of something better later\n            return (\n              <Column\n                key={idx}\n                id={idx}\n                class={column.titleClass}\n                title={column.title}\n                cards={column.cards}\n                addCards={this.addCards}\n                moveCard={this.moveCard}\n                >\n              </Column>\n            );\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/main.css';\nimport Board from './components/board/Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}